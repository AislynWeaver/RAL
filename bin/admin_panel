#!/usr/bin/perl
use strict;
use DBI;
use File::Basename;
use Text::Table;
use Digest::MD5 'md5_hex';

# Cute formatting; ANSI escape codes
use constant HOOYA_VERSION => '0.7';
use constant {
	FG_BLACK => '[0;30m',
	FG_RED => '[0;31m',
	FG_GREEN => '[0;32m',
	FG_YELLOW => '[0;33m',
	FG_BLUE => '[0;34m',
	FG_MAGENTA => '[0;35m',
	FG_CYAN => '[0;36m',
	FG_WHITE => '[0;37m',
	FG_DEFAULT => '[0;39m',

	BG_BLACK => '[0;40m',
	BG_RED => '[0;41m',
	BG_GREEN => '[0;42m',
	BG_YELLOW => '[0;43m',
	BG_BLUE => '[0;44m',
	BG_MAGENTA => '[0;45m',
	BG_CYAN => '[0;46m',
	BG_WHITE => '[0;47m',
	BG_DEFAULT => '[0;49m',

	TEXT_RESET => '[0;0m',
	TEXT_BOLD => '[0;1m',
	TEXT_STANDOUT => '[0;3m',
	TEXT_BLINK => '[0;5m',
	TEXT_REVERSE => '[0;7m',
};

# Disable buffering
$| = 1;

# Notifications
sub die_error { die FG_RED . $_[0] . FG_DEFAULT . "\n"; }
sub notify_success { print FG_GREEN . $_[0] . FG_DEFAULT . "\n"; }
sub notify_warn { print FG_YELLOW . $_[0] . FG_DEFAULT . "\n"; }
sub notify_error { print FG_RED . $_[0] . FG_DEFAULT . "\n"; }
sub status_update {
	my ($current, $total) = @_;
	my $percent = ($current/$total)*100;

	printf("\33[2K\r");
	printf("%.f%% done (%d / %d)", $percent, $current, $total);
	print "\n" if ($current == $total);
}

# Fn
sub present_choices {
	my $i = 1;
	foreach (@_) {
		print "$i.) $_\n"; $i++;
	}
	print "\n> ";
	my $choice = <>;
	if ($choice >= $i) {
		notify_error 'Invalid choice';
		return &present_choices;
	}
	$_[$choice-1];
}
sub rail_fence {
	# Parameters
	my $txt = shift @_;
	my $n = shift @_;

	# Set up the fence with $n rails
	my @fence = ();
	my $rail = 0;
	my $halfcycle = $n - 1;
	my $secret = '';

	for (my $i = 0; $i < length $txt; $i++) {
		# Put a letter on the fence
		push @{$fence[$rail]}, substr($txt, $i, 1);

		# Consider what our next move along the fence will be
		$rail++ if ($i % ($halfcycle * 2) < $halfcycle);
		$rail-- if ($i % ($halfcycle * 2) >= $halfcycle);
	}

	# Read the message from the fence
	while ($n--) {
		$secret = join('', @{$fence[$n]}) . $secret;
	} return $secret;
}

# Read SQL settings from the config file
my ($CONFIG_RAL_SERVER,
$CONFIG_RAL_USERNAME,
$CONFIG_RAL_PASSWORD,
$CONFIG_RAL_DATABASE);
my $incfile =  dirname($0) . "/../includes/config.php";
open(FILE, $incfile);
while (<FILE>) {
	$CONFIG_RAL_SERVER = $1 if (/["']CONFIG_RAL_SERVER["'], ["'](.+)["']/);
	$CONFIG_RAL_USERNAME = $1 if (/"CONFIG_RAL_USERNAME", ["'](.+)["']/);
	$CONFIG_RAL_PASSWORD = $1 if (/["']CONFIG_RAL_PASSWORD["'], ["'](.+)["']/);
	$CONFIG_RAL_DATABASE = $1 if (/["']CONFIG_RAL_DATABASE["'], ["'](.+)["']/);
}
close(FILE);

my $dsn = "DBI:mysql:database=" . $CONFIG_RAL_DATABASE
. ";host=" . $CONFIG_RAL_SERVER;
my $dbh = DBI->connect(
	$dsn,
	$CONFIG_RAL_USERNAME,
	$CONFIG_RAL_PASSWORD,
	{'PrintError' => 0}
);
if (!defined $dbh) {
	die_error DBI::errstr;
}
my $sth; my $row;

# Pre-fetch a list of all continuities
my @continuities;
$sth = $dbh->prepare('SELECT `Name` FROM `Continuities`');
$sth->execute or die_error DBI::errstr;
while ($row = $sth->fetchrow_hashref) {
	push @continuities, $row->{'Name'};
}

print FG_CYAN
. "RAL Admin Panel\n"
. FG_DEFAULT
. "---------------\n";


my $choice;
do {
print "Main Menu\n";
$choice = present_choices(
	'Continuities',
	'News',
	'Bans',
	'Post Details',
	'Miscellany',
	'Quit'
);
if ($choice eq 'Continuities') {
	$choice = present_choices(
		'Metrics',
		'Create a Continuity',
		'Delete a Continuity'
	);
	if ($choice eq 'Metrics') {
		$sth = $dbh->prepare('SELECT `Name`, `Post Count` FROM `Continuities`');
		$sth->execute or die_error DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			print "$row->{'Name'}\n\t$row->{'Post Count'} post";
			print "s" if ($row->{'Post Count'} > 1);
			print "\n";
		}
		if (!$sth->rows) {
			notify_warn "There are no continuities!";
		}
	} elsif ($choice eq 'Create a Continuity') {
		print "\nNew Continuity Name: ";
		my $name = <>; chomp $name;
		print "Description: ";
		my $desc = <>; chomp $desc;
		$sth = $dbh->prepare('INSERT INTO `Continuities` '
		. '(`Name`, `Description`) VALUES ((?), (?))');
		$sth->execute($name, $desc) or die_error DBI::errstr;
		notify_success "Successfully created $name";
	} elsif ($choice eq 'Delete a Continuity') {
		print "\nDelete which continuity?\n";
		$choice = present_choices @continuities;
		$sth = $dbh->prepare('DELETE FROM `Continuities` WHERE'
		. ' `Name`=(?)');
		$sth->execute($choice) or die_error DBI::errstr;
		$sth = $dbh->prepare('DELETE FROM `Replies` WHERE'
		. ' `Continuity`=(?)');
		$sth->execute($choice) or die_error DBI::errstr;
		$sth = $dbh->prepare('DELETE FROM `Topics` WHERE'
		. ' `Continuity`=(?)');
		$sth->execute($choice) or die_error DBI::errstr;
		notify_success "Deleted $choice and all its posts";
	}
} elsif ($choice eq 'News') {
	$choice = present_choices(
		'Add a News Item',
		'Delete a News Item'
	);
	if ($choice eq 'Add a News Item') {
		print "\nAuthor: ";
		my $author = <>; chomp $author;
		print "Author's e-mail: ";
		my $email = <>; chomp $email;
		print "Title: ";
		my $title = <>; chomp $title;
		print "Content (Terminate with \"EOL\")\n";
		my $content; while (<>) {
			last if ($_ eq "EOL\n");
			$content .= $_;
		} chomp $content;
		my $query = <<SQL;
		INSERT INTO `News` (
			`Author`,
			`Email`,
			`Title`,
			`Content`
		) VALUES (
			(?), (?), (?), (?)
		)
SQL
		$sth = $dbh->prepare($query);
		$sth->execute($author, $email, $title, $content) or die_error DBI::errstr;
		notify_success "Successfully created the news item!";
	} elsif ($choice eq 'Delete a News Item') {
		print "\nNews Item ID To Delete: ";
		my $id;
		my $id = <>; chomp $id;
		$sth = $dbh->prepare('DELETE FROM `News` WHERE'
		. ' `Id`=(?)');
		$sth->execute($id) or die_error DBI::errstr;
		notify_success "Deleted news item $id";
	}
} elsif ($choice eq 'Bans') {
	$choice = present_choices 'View Bans', 'Shadow Ban', 'Lift a Ban';
	if ($choice eq 'View Bans') {
		my $tb = Text::Table->new('Id', 'Type', 'Date');
		$sth = $dbh->prepare('SELECT `Id`, `Type`, `Date`'
		. ' FROM `Bans` ORDER BY `Date`');
		$sth->execute or die_error DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			$tb->add($row->{'Id'},
			$row->{'Type'}, $row->{'Date'});
		}
		if (!$sth->rows) {
			print "No bans...wao!\n"
		} else {
			print $tb;
		}
	} elsif ($choice eq 'Shadow Ban') {
		print "\nFrom which continuity?\n";
		$choice = present_choices @continuities;
		print "Post id: ";
		my $id = <>; chomp $id;
		$sth = $dbh->prepare('INSERT INTO `Bans` (`Id`, `Type`)'
		. ' SELECT `Auth` AS `Id`, (?) AS `Type`  FROM `Posts`'
		. ' WHERE `Id`=(?) AND `Continuity`=(?)');
		$sth->execute('SLOW', $id, $choice) or die_error DBI::errstr;
		if ($sth->rows) {
			notify_success "Success: The user is shadow banned";
		} else {
			notify_warn "Error: No such post $choice/$id";
		}
	} elsif ($choice eq 'Lift a Ban') {
		print "\nAuth: ";
		my $id = <>; chomp $id;
		$sth = $dbh->prepare('DELETE FROM `Bans` WHERE `Id`=(?)');
		$sth->execute($id) or die_error DBI::errstr;
		if ($sth->rows) {
			notify_success "Success: The ban was lifted";
		} else {
			notify_warn "Error: Nothing was affecting $id";
		}
	}
} elsif ($choice eq 'Post Details') {
} elsif ($choice eq 'Miscellany') {
	$choice = present_choices 'Convert HTML Entities', 'Convert Old DB';
	if ($choice eq 'Convert HTML Entities') {
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Content` FROM `Posts`');
		print <<PROMPT;
This option searches for HTML entities in all posts and replaces them with
the appropriate plain-text character. This is only useful if you are
upgrading from v1.0 -> v1.1.

PROMPT
		print "Convert entities? (Y/n) ";
		my $answer = <>; chomp $answer;
		if ($answer eq 'Y') { $sth->execute() or die DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			my $newcontent = $row->{'Content'};
			$newcontent =~ s/&lt;/</g;
			$newcontent =~ s/&gt;/>/g;
			$newcontent =~ s/&quot;/>/g;
			$newcontent =~ s/&amp;/&/g;
			if ($row->{'Content'} ne $newcontent) {
				print "[$row->{Continuity} / $row->{Id}]\n";
				my $sth2 = $dbh->prepare('UPDATE `Posts` Set'
				. ' `Content`=(?) WHERE `Id`=(?) AND'
				. ' `Continuity`=(?)');
				$sth2->execute($newcontent, $row->{'Id'},
				$row->{'Continuity'});
			}
		} }
	} elsif ($choice eq 'Convert Old DB') {
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Created`, `Topic`, `Content` FROM `Posts`'
		. ' WHERE `Id`=`Topic` ORDER BY `Continuity`, `Created` ASC');
		my $sth2 = $dbh->prepare('INSERT INTO `Topics` (`Id`, `Created`,'
		. ' `Continuity`, `Content`) VALUES'
		. '((?), (?), (?), (?))');
		my $sth3 = $dbh->prepare('UPDATE `Continuities` SET'
		. ' `Post Count`=`Post Count`+1 WHERE `Name`=(?)');
		my $sth4 = $dbh->prepare('UPDATE `Topics` SET'
		. ' `Replies`=`Replies`+1 WHERE `Continuity`=(?)'
		. ' AND `Year`=? AND Id=?');

		print <<PROMPT;
Selecting this option will convert the current database to the new format
introduced in v2.0. This option is only useful if you are upgrading from
v1.2 or below.
PROMPT
		print "Convert DB? (Y/n) ";
		my $answer = <>; chomp $answer;
		if ($answer eq 'Y') { $sth->execute() or die DBI::errstr;
		my $statement = <<SQL;
		CREATE TABLE `Topics` (
			`Id` INT(11) NOT NULL,
			`Created` DATETIME DEFAULT current_timestamp(),
			`Continuity` VARCHAR(16) NOT NULL,
			`Content` TEXT NOT NULL DEFAULT '',
			`Replies` INT(11) DEFAULT  0,
			`Year` INT(4) DEFAULT YEAR(`Created`),
			PRIMARY KEY (`Continuity`, `Year`, `Id`) )
SQL
		$dbh->do($statement) or notify_warn DBI::errstr;
		$statement = <<SQL;
		CREATE TABLE `Replies` (
			`Id` INT(11) NOT NULL,
			`Created` DATETIME DEFAULT CURRENT_TIMESTAMP(),
			`Continuity` VARCHAR(16) NOT NULL,
			`Year` INT(4) DEFAULT YEAR(`Created`),
			`Topic` INT(11) NOT NULL,
			`Content` TEXT NOT NULL DEFAULT '',
			PRIMARY KEY (`Continuity`, `Year`, `Topic`, `Id`) )
SQL
		$dbh->do($statement) or notify_warn DBI::errstr;
		$statement = <<SQL;
		CREATE TABLE `News` (
			`Id` int(11) NOT NULL AUTO_INCREMENT,
			`Created` datetime DEFAULT current_timestamp(),
			`Author` varchar(40) NOT NULL,
			`Email` varchar(100) DEFAULT NULL,
			`TITLE` varchar(100) NOT NULL,
			`Content` varchar(5000) NOT NULL,
			PRIMARY KEY (`Id`) )
SQL
		$dbh->do($statement) or notify_warn DBI::errstr;

		my $firstpost = <<POST;
CONCAT("Welcome to the [i]", NEW.Name, "[/i] continuity.
Here you will find topics about [i]", NEW.description, "[/i].
I hope you will enjoy your time here!")
POST
		$statement = <<SQL;
		CREATE TRIGGER new_continuity AFTER INSERT ON Continuities
		FOR EACH ROW
			INSERT INTO Topics (`Id`, `Created`, `Continuity`, `Content`)
			VALUES (1, CURRENT_TIMESTAMP(), NEW.Name, $firstpost)
SQL
		$dbh->do($statement) or notify_warn DBI::errstr;

		$statement = <<SQL;
		CREATE TRIGGER new_topic AFTER INSERT ON Topics
		FOR EACH ROW
		INSERT INTO `Replies`
			(`Id`, Topic, Created, `Continuity`, `Year`, `Content`)
			VALUES (1, NEW.Id, NEW.Created, NEW.Continuity, NEW.Year, NEW.Content)
SQL
		$dbh->do($statement) or notify_warn DBI::errstr;

		my $topic = 1;
		my %topicmap = {}; my $cont;
		while ($row = $sth->fetchrow_hashref) {
			if (!defined $cont || $row->{Continuity} ne $cont) {
				$topic = 1;
				$cont = $row->{Continuity};
			}
			$topicmap{"$row->{Continuity}/$row->{Id}"} = $topic;
			print "Converting [$row->{Continuity}/$row->{Id}]"
			. " to [$cont/2018/$topic]\n";
			$sth2->execute(
				$topic,
				$row->{Created},
				$cont,
				$row->{Content}
			);
			$sth4->execute(
				$row->{Continuity},
				'2018',	# Extract year from $row->{Created}
				$topic
			) or die DBI::errstr; $topic++;
		}
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Created`, `Topic`, `Content` FROM `Posts`'
		. '  ORDER BY `Continuity` ASC, `Topic` ASC, `Created` ASC');
		$sth2 = $dbh->prepare('INSERT INTO `Replies` (`Id`, `Created`,'
		. ' `Continuity`, `Topic`, `Content`)'
		. 'VALUES ((?), (?), (?), (?), (?))');

		$sth->execute() or die DBI::errstr;
		my $reply; my $newtopic;
		while ($row = $sth->fetchrow_hashref) {
			if (!defined $topic || $row->{Topic} != $topic) {
				$reply = 2;
				$topic = $row->{Topic};
				$newtopic = $topicmap{"$row->{Continuity}/$topic"};
				next;
			}
			print "Converting [$row->{Continuity}/$row->{Id}]"
			. " to [$row->{Continuity}/$newtopic/$reply]\n";
			$sth2->execute(
				$reply,
				$row->{Created},
				$row->{Continuity},
				$newtopic,
				$row->{Content}
			) or die DBI::errstr;
			$sth3->execute(
				$row->{Continuity}
			) or die DBI::errstr;
			$sth4->execute(
				$row->{Continuity},
				'2018',	# Extract year from $row->{Created}
				$newtopic
			) or die DBI::errstr; $reply++;
		} }
	}
} print "\n"; } while ($choice ne 'Quit');
