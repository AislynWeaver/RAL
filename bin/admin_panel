#!/usr/bin/perl
use strict;
use DBI;
use File::Basename;
use Text::Table;
use Digest::MD5 'md5_hex';

# Cute formatting; ANSI escape codes
use constant HOOYA_VERSION => '0.7';
use constant {
	FG_BLACK => '[0;30m',
	FG_RED => '[0;31m',
	FG_GREEN => '[0;32m',
	FG_YELLOW => '[0;33m',
	FG_BLUE => '[0;34m',
	FG_MAGENTA => '[0;35m',
	FG_CYAN => '[0;36m',
	FG_WHITE => '[0;37m',
	FG_DEFAULT => '[0;39m',

	BG_BLACK => '[0;40m',
	BG_RED => '[0;41m',
	BG_GREEN => '[0;42m',
	BG_YELLOW => '[0;43m',
	BG_BLUE => '[0;44m',
	BG_MAGENTA => '[0;45m',
	BG_CYAN => '[0;46m',
	BG_WHITE => '[0;47m',
	BG_DEFAULT => '[0;49m',

	TEXT_RESET => '[0;0m',
	TEXT_BOLD => '[0;1m',
	TEXT_STANDOUT => '[0;3m',
	TEXT_BLINK => '[0;5m',
	TEXT_REVERSE => '[0;7m',
};

# Disable buffering
$| = 1;

# Notifications
sub die_error { die FG_RED . $_[0] . FG_DEFAULT . "\n"; }
sub notify_success { print FG_GREEN . $_[0] . FG_DEFAULT . "\n"; }
sub notify_warn { print FG_YELLOW . $_[0] . FG_DEFAULT . "\n"; }
sub notify_error { print FG_RED . $_[0] . FG_DEFAULT . "\n"; }
sub status_update {
	my ($current, $total) = @_;
	my $percent = ($current/$total)*100;

	printf("\33[2K\r");
	printf("%.f%% done (%d / %d)", $percent, $current, $total);
	print "\n" if ($current == $total);
}

# Fn
sub present_choices {
	my $i = 1;
	foreach (@_) {
		print "$i.) $_\n"; $i++;
	}
	print "\n> ";
	my $choice = <>;
	if ($choice >= $i) {
		notify_error 'Invalid choice';
		return &present_choices;
	}
	$_[$choice-1];
}
sub rail_fence {
	# Parameters
	my $txt = shift @_;
	my $n = shift @_;

	# Set up the fence with $n rails
	my @fence = ();
	my $rail = 0;
	my $halfcycle = $n - 1;
	my $secret = '';

	for (my $i = 0; $i < length $txt; $i++) {
		# Put a letter on the fence
		push @{$fence[$rail]}, substr($txt, $i, 1);

		# Consider what our next move along the fence will be
		$rail++ if ($i % ($halfcycle * 2) < $halfcycle);
		$rail-- if ($i % ($halfcycle * 2) >= $halfcycle);
	}

	# Read the message from the fence
	while ($n--) {
		$secret = join('', @{$fence[$n]}) . $secret;
	} return $secret;
}

# Read SQL settings from the config file
my ($CONFIG_RAL_SERVER,
$CONFIG_RAL_USERNAME,
$CONFIG_RAL_PASSWORD,
$CONFIG_RAL_DATABASE,
$CONFIG_ADMIN_NAME);
my $incfile =  dirname($0) . "/../includes/config.php";
open(FILE, $incfile);
while (<FILE>) {
	$CONFIG_RAL_SERVER = $1 if (/["']CONFIG_RAL_SERVER["'], ["'](.+)["']/);
	$CONFIG_RAL_USERNAME = $1 if (/"CONFIG_RAL_USERNAME", ["'](.+)["']/);
	$CONFIG_RAL_PASSWORD = $1 if (/["']CONFIG_RAL_PASSWORD["'], ["'](.+)["']/);
	$CONFIG_RAL_DATABASE = $1 if (/["']CONFIG_RAL_DATABASE["'], ["'](.+)["']/);
	$CONFIG_ADMIN_NAME = $1 if (/["']CONFIG_ADMIN_NAME["'], ["'](.+)["']/);
}
close(FILE);

my $dsn = "DBI:mysql:database=" . $CONFIG_RAL_DATABASE
. ";host=" . $CONFIG_RAL_SERVER;
my $dbh = DBI->connect(
	$dsn,
	$CONFIG_RAL_USERNAME,
	$CONFIG_RAL_PASSWORD,
	{'PrintError' => 0}
);
if (!defined $dbh) {
	die_error DBI::errstr;
}
my $sth; my $row;

# Pre-fetch a list of all continuities
my @continuities;
$sth = $dbh->prepare('SELECT `Name` FROM `Continuities`');
$sth->execute or die_error DBI::errstr;
while ($row = $sth->fetchrow_hashref) {
	push @continuities, $row->{'Name'};
}

print FG_CYAN
. "Welcome home $CONFIG_ADMIN_NAME\n"
. FG_DEFAULT;

my $choice;
do {
print "Main Menu\n";
$choice = present_choices(
	'Continuities',
	'Encrypt a post',
	'Bans',
	'Post Details',
	'Miscellany',
	'Quit'
);
if ($choice eq 'Continuities') {
	$choice = present_choices(
		'Metrics',
		'Create a Continuity',
		'Delete a Continuity'
	);
	if ($choice eq 'Metrics') {
		$sth = $dbh->prepare('SELECT `Name`, `Post Count` FROM `Continuities`');
		$sth->execute or die_error DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			print "$row->{'Name'}\n\t$row->{'Post Count'} post";
			print "s" if ($row->{'Post Count'} > 1);
			print "\n";
		}
		if (!$sth->rows) {
			notify_warn "There are no continuities!";
		}
	} elsif ($choice eq 'Create a Continuity') {
		print "\nNew Continuity Name: ";
		my $name = <>; chomp $name;
		print "Description: ";
		my $desc = <>; chomp $desc;
		$sth = $dbh->prepare('INSERT INTO `Continuities` '
		. '(`Name`, `Description`) VALUES ((?), (?))');
		$sth->execute($name, $desc) or die_error DBI::errstr;
		notify_success "Successfully created $name";
	} elsif ($choice eq 'Delete a Continuity') {
		print "\nDelete which continuity?\n";
		$choice = present_choices @continuities;
		$sth = $dbh->prepare('DELETE FROM `Continuities` WHERE'
		. ' `Name`=(?)');
		$sth->execute($choice) or die_error DBI::errstr;
		$sth = $dbh->prepare('DELETE FROM `Posts` WHERE'
		. ' `Continuity`=(?)');
		$sth->execute($choice) or die_error DBI::errstr;
		notify_success "Deleted $choice and all its posts";
	}
} elsif ($choice eq 'Encrypt a post') {
	print "\nFrom which continuity?\n";
	$choice = present_choices @continuities;
	print "Post id: ";
	my $id = <>; chomp $id;
	$sth = $dbh->prepare('SELECT `Content` FROM `Posts` WHERE `Continuity`=(?)'
	. ' AND `Id`=(?)');
	$sth->execute($choice, $id) or die_error DBI::errstr;
	if (!$sth->rows) {
		notify_warn 'No such post';
		continue;
	}
	my $content = $sth->fetchrow_hashref->{'Content'};
	$content = md5_hex($content);
	$sth = $dbh->prepare('UPDATE `Posts` SET `Content`=(?) WHERE'
	. ' `Continuity`=(?) AND `Id`=(?)');
	$sth->execute($content, $choice, $id) or die_error DBI::errstr;
	if ($sth->rows) {
		notify_success "Success: Encrypted $choice/$id";
	} else {
		notify_warn "Error: Nothing was changed";
	}
} elsif ($choice eq 'Bans') {
	$choice = present_choices 'View Bans', 'Shadow Ban', 'Lift a Ban';
	if ($choice eq 'View Bans') {
		my $tb = Text::Table->new('Id', 'Type', 'Date');
		$sth = $dbh->prepare('SELECT `Id`, `Type`, `Date`'
		. ' FROM `Bans` ORDER BY `Date`');
		$sth->execute or die_error DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			$tb->add($row->{'Id'},
			$row->{'Type'}, $row->{'Date'});
		}
		if (!$sth->rows) {
			print "No bans...wao!\n"
		} else {
			print $tb;
		}
	} elsif ($choice eq 'Shadow Ban') {
		print "\nFrom which continuity?\n";
		$choice = present_choices @continuities;
		print "Post id: ";
		my $id = <>; chomp $id;
		$sth = $dbh->prepare('INSERT INTO `Bans` (`Id`, `Type`)'
		. ' SELECT `Auth` AS `Id`, (?) AS `Type`  FROM `Posts`'
		. ' WHERE `Id`=(?) AND `Continuity`=(?)');
		$sth->execute('SLOW', $id, $choice) or die_error DBI::errstr;
		if ($sth->rows) {
			notify_success "Success: The user is shadow banned";
		} else {
			notify_warn "Error: No such post $choice/$id";
		}
	} elsif ($choice eq 'Lift a Ban') {
		print "\nAuth: ";
		my $id = <>; chomp $id;
		$sth = $dbh->prepare('DELETE FROM `Bans` WHERE `Id`=(?)');
		$sth->execute($id) or die_error DBI::errstr;
		if ($sth->rows) {
			notify_success "Success: The ban was lifted";
		} else {
			notify_warn "Error: Nothing was affecting $id";
		}
	}
} elsif ($choice eq 'Post Details') {
} elsif ($choice eq 'Miscellany') {
	$choice = present_choices 'Convert HTML Entities', 'Convert Old DB';
	if ($choice eq 'Convert HTML Entities') {
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Content` FROM `Posts`');
		print <<PROMPT;
This option searches for HTML entities in all posts and replaces them with
the appropriate plain-text character. This is only useful if you are
upgrading from v1.0 -> v1.1.

PROMPT
		print "Convert entities? (Y/n) ";
		my $answer = <>; chomp $answer;
		if ($answer eq 'Y') { $sth->execute() or die DBI::errstr;
		while ($row = $sth->fetchrow_hashref) {
			my $newcontent = $row->{'Content'};
			$newcontent =~ s/&lt;/</g;
			$newcontent =~ s/&gt;/>/g;
			$newcontent =~ s/&quot;/>/g;
			$newcontent =~ s/&amp;/&/g;
			if ($row->{'Content'} ne $newcontent) {
				print "[$row->{Continuity} / $row->{Id}]\n";
				my $sth2 = $dbh->prepare('UPDATE `Posts` Set'
				. ' `Content`=(?) WHERE `Id`=(?) AND'
				. ' `Continuity`=(?)');
				$sth2->execute($newcontent, $row->{'Id'},
				$row->{'Continuity'});
			}
		} }
	} elsif ($choice eq 'Convert Old DB') {
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Created`, `Topic`, `Content` FROM `Posts`'
		. ' WHERE `Id`=`Topic` ORDER BY `Created` ASC');
		my $sth2 = $dbh->prepare('INSERT INTO `Topics` (`Id`, `Created`,'
		. ' `Continuity`, `Content`) VALUES'
		. '((?), (?), (?), (?))');
		print <<PROMPT;
Selecting this option will convert the current database to the new format
introduced in v2.0. This option is only useful if you are upgrading from
v1.2 or below.
PROMPT
		print "Convert DB? (Y/n) ";
		my $answer = <>; chomp $answer;
		if ($answer eq 'Y') { $sth->execute() or die DBI::errstr;
		my $topic = 1;
		my %topicmap = {};
		while ($row = $sth->fetchrow_hashref) {
			$topicmap{"$row->{Continuity}/$row->{Id}"} = $topic;
			print "Converting [$row->{Continuity}/$row->{Id}]\n";
			$sth2->execute(
				$topic,
				$row->{Created},
				$row->{Continuity},
				$row->{Content}
			); $topic++;
		}
		$sth = $dbh->prepare('SELECT `Id`, `Continuity`,'
		. ' `Created`, `Topic`, `Content` FROM `Posts`'
		. ' WHERE `Id`!=`Topic` ORDER BY `Topic` ASC, `Created` ASC');
		$sth2 = $dbh->prepare('INSERT INTO `Replies` (`Id`, `Created`,'
		. ' `Continuity`, `Topic`, `Content`)'
		. 'VALUES ((?), (?), (?), (?), (?))');
		$sth->execute() or die DBI::errstr;
		my $reply;
		while ($row = $sth->fetchrow_hashref) {
			if (!defined $topic || $row->{Topic} != $topic) {
				$reply = 1;
				$topic = $row->{Topic};
			}
			print "Converting [$row->{Continuity}/$row->{Id}]\n";
			$sth2->execute(
				$reply,
				$row->{Created},
				$row->{Continuity},
				$topicmap{"$row->{Continuity}/$row->{Topic}"},
				$row->{Content}
			) or die DBI::errstr; $reply++;
		} }
	}
} print "\n"; } while ($choice ne 'Quit');
